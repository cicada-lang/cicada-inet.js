Vector : { (- type) (- Nat) Type }
Vector = {
  [A : Type]
  [n : Nat]
  datatype {
    vector_null : { datacons { n == zero } }
    vector_cons : {
      (let prev : Nat)
      (- A) (- prev A Vector)
      datacons { n == prev succ }
    }
  }
}

vector_append : {
  [A : Type]
  [m : Nat]
  [n : Nat]
  (- m A Vector)
  (- n A Vector)
  m n nat_add A Vector
}
vector_append = {
  (dep A : Type)
  (dep m : Nat)
  (dep n : Nat)
  [x : m A Vector]
  [y : n A Vector]
  x match {
    case vector_null { y }
    case vector_cons {
      [prev : Nat]
      [head : A] [tail : prev A Vector]
      y tail n prev A vector_append
      head prev vector_cons
    }
  }
}
