type Trivial -- Type end
node sole -- Trivial :value! end

type List Type -- Type end

node null
  --------
  'A List :value!
end

node cons
  'A :head
  'A List :tail
  --------
  'A List :value!
end

type DiffList Type -- Type end

node diff
  'A List :front
  -------
  'A List :back
  'A DiffList :value!
end

// Concatenation of lists is performed in linear time
// with respect to its first argument.
// Constant time concatenation is possible
// with difference-lists: the idea consists in
// plugging the front of the second argument
// at the back of the first one.

node diff_append
  'A DiffList :target!
  'A DiffList :rest
  --------
  'A DiffList :return
end

node diff_open
  'A DiffList :target!
  'A List :list
  ----------
  'A List :return
end

rule diff diff_append
  (diff)-front diff return-(diff_append)
  (diff_append)-rest diff_open back-(diff)
end

rule diff diff_open
  (diff)-back list-(diff_open)
  (diff)-front return-(diff_open)
end

claim one_two_soles -- Trivial DiffList end

define one_two_soles
  sole (cons :tail) diff rot rot connect
  sole (cons :tail) sole cons diff rot rot connect
  diff_append
end

begin one_two_soles inspect run inspect end

claim two_two_soles -- Trivial DiffList end

define two_two_soles
  sole (cons :tail) sole cons diff rot rot connect
  sole (cons :tail) sole cons diff rot rot connect
  diff_append
end

begin two_two_soles inspect run inspect end

claim two_two_soles_with_local -- Trivial DiffList end

define two_two_soles_with_local
  sole (cons :tail) sole cons diff $value connect value
  sole (cons :tail) sole cons diff $value connect value
  diff_append
end

begin two_two_soles_with_local inspect run inspect end
