type Trivial -- Type end
node sole -- value!: Trivial end

type List Type -- Type end
node null -- value!: List('A) end
node cons head: 'A tail: List('A) -- value!: List('A) end

type DiffList Type -- Type end

node diff
  front: List('A)
  -------
  back: List('A)
  value!: DiffList('A)
end

// Concatenation of lists is performed in linear time
// with respect to its first argument.
// Constant time concatenation is possible
// with difference-lists: the idea consists in
// plugging the front of the second argument
// at the back of the first one.

node diff_append
  target!: DiffList('A)
  rest: DiffList('A)
  ------
  return: DiffList('A)
end

node diff_open
  target!: DiffList('A)
  list: List('A)
  ------
  return: List('A)
end

rule diff diff_append
  (diff)-front diff return-(diff_append)
  (diff_append)-rest diff_open back-(diff)
end

rule diff diff_open
  (diff)-back list-(diff_open)
  (diff)-front return-(diff_open)
end

claim one_two_soles -- Trivial DiffList end

define one_two_soles
  wire sole cons diff rot rot connect
  wire sole cons sole cons diff rot rot connect
  diff_append
end

show one_two_soles end
run one_two_soles end

claim two_two_soles -- Trivial DiffList end

define two_two_soles
  wire sole cons sole cons diff rot rot connect
  wire sole cons sole cons diff rot rot connect
  diff_append
end

show two_two_soles end
run two_two_soles end

claim two_two_soles_with_local -- Trivial DiffList end

define two_two_soles_with_local
  wire sole cons sole cons diff $value connect value
  wire sole cons sole cons diff $value connect value
  diff_append
end

show two_two_soles_with_local end
run two_two_soles_with_local end
