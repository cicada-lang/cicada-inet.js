type Nat 0 end
node zero -- value!: Nat end
node add1 prev: Nat -- value!: Nat end

node add target!: Nat; addend: Nat -- return: Nat end

rule zero add
  [add]-addend
  return-[add]
end

rule add1 add
  [add]-addend [add1]-prev add add1
  return-[add]
end

show zero zero add end
run zero zero add end

claim one Nat end
define one zero add1 end

claim two Nat end
define two one one add end

claim four Nat end
define four two two add end

show two end
run two end

show four end
run four end

show zero one add end
run zero one add end

claim addadd Nat Nat Nat -- Nat end
define addadd add add end

run one one one addadd end

// To define `mul`, we first need `nat_erase` and `nat_dup`.

node nat_erase target!: Nat -- end

rule zero nat_erase end
rule add1 nat_erase [add1]-prev nat_erase end

show two nat_erase end
run two nat_erase end

node nat_dup target!: Nat -- second: Nat; first: Nat end

rule zero nat_dup
  zero first-[nat_dup]
  zero second-[nat_dup]
end

rule add1 nat_dup
  [add1]-prev nat_dup $first $second
  first add1 first-[nat_dup]
  second add1 second-[nat_dup]
end

show two nat_dup end
run two nat_dup end

node mul target!: Nat; mulend: Nat -- return: Nat end

rule zero mul
  [mul]-mulend nat_erase
  zero return-[mul]
end

rule add1 mul
  [mul]-mulend nat_dup $first $second
  [add1]-prev first mul second add
  return-[mul]
end

show two two mul end
run two two mul end

claim three Nat end
define three two one add end

show three three mul end
run three three mul end

// To define `max`, we need `max_aux`.

node max_aux left: Nat; right!: Nat -- return: Nat end

node max left!: Nat; right: Nat -- return: Nat end

rule zero max
  [max]-right return-[max]
end

rule add1 max
  [max]-right [add1]-prev max_aux
  return-[max]
end

rule zero max_aux
  [max_aux]-left add1
  return-[max_aux]
end

rule add1 max_aux
  [add1]-prev [max_aux]-left max
  add1 return-[max_aux]
end


run zero two max end
run one two max end
run three two max end