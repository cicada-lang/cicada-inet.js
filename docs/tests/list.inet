(define-cons sole
  (-> ()
      (Trivial)))

(define-cons null
  (-> ()
      (TrivialList)))

(define-cons cons
  (-> (TrivialList Trivial)
      (Nat)))

(define-elim append
  (-> (TrivialList TrivialList)
      (TrivialList)))

(define-rule
  (null append)
  ())

(define-rule
  (cons append)
  (rot rot append swap cons))

(define-net six-soles
  null sole cons sole cons sole cons
  null sole cons sole cons sole cons
  append)
