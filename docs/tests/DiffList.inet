deftype Trivial 0 end

defnode sole
  ------
  value!: Trivial
end

deftype List 1 end

defnode null
  ------
  value!: List('a)
end

defnode cons
  head: 'a
  tail: List('a)
  -------
  value!: List('a)
end

deftype DiffList 1 end

defnode diff
  front: List('a)
  ------
  back: List('a)
  value!: DiffList('a)
end

// Concatenation of lists is performed in linear time
// with respect to its first argument.
// Constant time concatenation is possible
// with difference-lists: the idea consists in
// plugging the front of the second argument
// at the back of the first one.

defnode diff_append
  target!: DiffList('a)
  rest: DiffList('a)
  ------
  return: DiffList('a)
end

defnode diff_open
  target!: DiffList('a)
  list: List('a)
  ------
  return: List('a)
end

defrule diff diff_append
  (diff)-front diff return-(diff_append)
  (diff_append)-rest diff_open back-(diff)
end

defrule diff diff_open
  (diff)-back return-(diff_open)
  (diff)-front list-(diff_open)
end

defn one_two_soles
  wire sole cons diff rot rot connect
  wire sole cons sole cons diff rot rot connect
  diff_append
end

show one_two_soles end
run one_two_soles end

defn two_two_soles
  wire sole cons sole cons diff rot rot connect
  wire sole cons sole cons diff rot rot connect
  diff_append
end

show two_two_soles end
run two_two_soles end

defn two_two_soles_with_local_variable
  wire sole cons sole cons diff $value connect value
  wire sole cons sole cons diff $value connect value
  diff_append
end

show two_two_soles_with_local_variable end
run two_two_soles_with_local_variable end
