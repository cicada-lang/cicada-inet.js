type Trivial 0 end

node sole -- value!: Trivial end

type List 1 end

node null -- value!: List('a) end
node cons head: 'a; tail: List('a) -- value!: List('a) end

type DiffList 1 end

node diff
  front: List('a)
  -------
  back: List('a)
  value!: DiffList('a)
end

// Concatenation of lists is performed in linear time
// with respect to its first argument.
// Constant time concatenation is possible
// with difference-lists: the idea consists in
// plugging the front of the second argument
// at the back of the first one.

node diff_append
  target!: DiffList('a)
  rest: DiffList('a)
  ------
  return: DiffList('a)
end

node diff_open
  target!: DiffList('a)
  list: List('a)
  ------
  return: List('a)
end

rule diff diff_append
  (diff)-front diff return-(diff_append)
  (diff_append)-rest diff_open back-(diff)
end

rule diff diff_open
  (diff)-back list-(diff_open)
  (diff)-front return-(diff_open)
end

claim one_two_soles DiffList(Trivial) end

define one_two_soles
  wire sole cons diff rot rot connect
  wire sole cons sole cons diff rot rot connect
  diff_append
end

show one_two_soles end
run one_two_soles end

claim two_two_soles DiffList(Trivial) end

define two_two_soles
  wire sole cons sole cons diff rot rot connect
  wire sole cons sole cons diff rot rot connect
  diff_append
end

show two_two_soles end
run two_two_soles end

claim two_two_soles_with_local_variable DiffList(Trivial) end

define two_two_soles_with_local_variable
  wire sole cons sole cons diff $value connect value
  wire sole cons sole cons diff $value connect value
  diff_append
end

show two_two_soles_with_local_variable end
run two_two_soles_with_local_variable end
