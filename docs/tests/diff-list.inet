(define-cons sole
  (-> ()
      (Trivial)))

(define-cons null
  (-> ()
      (TrivialList)))

(define-cons cons
  (-> (TrivialList Trivial)
      (Nat)))

(define-elim append
  (-> (TrivialList TrivialList)
      (TrivialList)))

(define-rule
  (null append)
  ())

(define-rule
  (cons append)
  (rot rot append swap cons))

(define-cons diff
  (-> (TrivialList TrivialList)
      (TrivialDiffList)))

(define-cons diff-open
  (-> (TrivialDiffList TrivialDiffList)
      (TrivialDiffList)))

(define-elim diff-append
  (-> (TrivialDiffList TrivialDiffList)
      (TrivialDiffList)))

(define-net diff-append-example-1
  wire sole cons diff
  wire sole cons sole cons diff
  diff-append)

(define-net diff-append-example-2
  wire sole cons sole cons diff
  wire sole cons sole cons diff
  diff-append)
